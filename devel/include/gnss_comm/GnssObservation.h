// Generated by gencpp from file gnss_comm/GnssObservation.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSOBSERVATION_H
#define GNSS_COMM_MESSAGE_GNSSOBSERVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssObservation_
{
  typedef GnssObservation_<ContainerAllocator> Type;

  GnssObservation_()
    : prn()
    , week(0)
    , tow(0.0)
    , SNR()
    , LLI()
    , code()
    , L()
    , P()
    , D()  {
    }
  GnssObservation_(const ContainerAllocator& _alloc)
    : prn(_alloc)
    , week(0)
    , tow(0.0)
    , SNR(_alloc)
    , LLI(_alloc)
    , code(_alloc)
    , L(_alloc)
    , P(_alloc)
    , D(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _prn_type;
  _prn_type prn;

   typedef uint16_t _week_type;
  _week_type week;

   typedef double _tow_type;
  _tow_type tow;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _SNR_type;
  _SNR_type SNR;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _LLI_type;
  _LLI_type LLI;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _code_type;
  _code_type code;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _L_type;
  _L_type L;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _P_type;
  _P_type P;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _D_type;
  _D_type D;





  typedef boost::shared_ptr< ::gnss_comm::GnssObservation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssObservation_<ContainerAllocator> const> ConstPtr;

}; // struct GnssObservation_

typedef ::gnss_comm::GnssObservation_<std::allocator<void> > GnssObservation;

typedef boost::shared_ptr< ::gnss_comm::GnssObservation > GnssObservationPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssObservation const> GnssObservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssObservation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssObservation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssObservation_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssObservation_<ContainerAllocator2> & rhs)
{
  return lhs.prn == rhs.prn &&
    lhs.week == rhs.week &&
    lhs.tow == rhs.tow &&
    lhs.SNR == rhs.SNR &&
    lhs.LLI == rhs.LLI &&
    lhs.code == rhs.code &&
    lhs.L == rhs.L &&
    lhs.P == rhs.P &&
    lhs.D == rhs.D;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssObservation_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssObservation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssObservation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssObservation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssObservation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssObservation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssObservation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssObservation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssObservation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1046d106d7c9fd0ab168f0ec9fdcf788";
  }

  static const char* value(const ::gnss_comm::GnssObservation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1046d106d7c9fd0aULL;
  static const uint64_t static_value2 = 0xb168f0ec9fdcf788ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssObservation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssObservation";
  }

  static const char* value(const ::gnss_comm::GnssObservation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssObservation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string prn        # Satellite PRN number\n"
"uint16 week       # GPS week\n"
"float64 tow       # GPS time of week\n"
"float64[] SNR      # Signal strengths\n"
"uint8[] LLI       # Loss of lock indicators\n"
"string[] code     # Code indicators\n"
"float64[] L       # Carrier phase cycles\n"
"float64[] P       # Pseudoranges\n"
"float64[] D       # Dopplers\n"
;
  }

  static const char* value(const ::gnss_comm::GnssObservation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssObservation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.week);
      stream.next(m.tow);
      stream.next(m.SNR);
      stream.next(m.LLI);
      stream.next(m.code);
      stream.next(m.L);
      stream.next(m.P);
      stream.next(m.D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssObservation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssObservation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssObservation_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.prn);
    s << indent << "week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.week);
    s << indent << "tow: ";
    Printer<double>::stream(s, indent + "  ", v.tow);
    s << indent << "SNR[]" << std::endl;
    for (size_t i = 0; i < v.SNR.size(); ++i)
    {
      s << indent << "  SNR[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.SNR[i]);
    }
    s << indent << "LLI[]" << std::endl;
    for (size_t i = 0; i < v.LLI.size(); ++i)
    {
      s << indent << "  LLI[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.LLI[i]);
    }
    s << indent << "code[]" << std::endl;
    for (size_t i = 0; i < v.code.size(); ++i)
    {
      s << indent << "  code[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.code[i]);
    }
    s << indent << "L[]" << std::endl;
    for (size_t i = 0; i < v.L.size(); ++i)
    {
      s << indent << "  L[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.L[i]);
    }
    s << indent << "P[]" << std::endl;
    for (size_t i = 0; i < v.P.size(); ++i)
    {
      s << indent << "  P[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.P[i]);
    }
    s << indent << "D[]" << std::endl;
    for (size_t i = 0; i < v.D.size(); ++i)
    {
      s << indent << "  D[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.D[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSOBSERVATION_H

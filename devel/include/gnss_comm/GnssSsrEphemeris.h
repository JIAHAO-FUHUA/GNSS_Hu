// Generated by gencpp from file gnss_comm/GnssSsrEphemeris.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSSSREPHEMERIS_H
#define GNSS_COMM_MESSAGE_GNSSSSREPHEMERIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssSsrEphemeris_
{
  typedef GnssSsrEphemeris_<ContainerAllocator> Type;

  GnssSsrEphemeris_()
    : prn()
    , week(0)
    , tow(0.0)
    , iod(0)
    , udi(0.0)
    , iode(0)
    , iodcrc(0)
    , refd(0)
    , deph()
    , ddeph()
    , dclk()  {
    }
  GnssSsrEphemeris_(const ContainerAllocator& _alloc)
    : prn(_alloc)
    , week(0)
    , tow(0.0)
    , iod(0)
    , udi(0.0)
    , iode(0)
    , iodcrc(0)
    , refd(0)
    , deph(_alloc)
    , ddeph(_alloc)
    , dclk(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _prn_type;
  _prn_type prn;

   typedef uint16_t _week_type;
  _week_type week;

   typedef double _tow_type;
  _tow_type tow;

   typedef uint32_t _iod_type;
  _iod_type iod;

   typedef double _udi_type;
  _udi_type udi;

   typedef uint8_t _iode_type;
  _iode_type iode;

   typedef uint32_t _iodcrc_type;
  _iodcrc_type iodcrc;

   typedef uint8_t _refd_type;
  _refd_type refd;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _deph_type;
  _deph_type deph;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ddeph_type;
  _ddeph_type ddeph;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dclk_type;
  _dclk_type dclk;





  typedef boost::shared_ptr< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> const> ConstPtr;

}; // struct GnssSsrEphemeris_

typedef ::gnss_comm::GnssSsrEphemeris_<std::allocator<void> > GnssSsrEphemeris;

typedef boost::shared_ptr< ::gnss_comm::GnssSsrEphemeris > GnssSsrEphemerisPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssSsrEphemeris const> GnssSsrEphemerisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator2> & rhs)
{
  return lhs.prn == rhs.prn &&
    lhs.week == rhs.week &&
    lhs.tow == rhs.tow &&
    lhs.iod == rhs.iod &&
    lhs.udi == rhs.udi &&
    lhs.iode == rhs.iode &&
    lhs.iodcrc == rhs.iodcrc &&
    lhs.refd == rhs.refd &&
    lhs.deph == rhs.deph &&
    lhs.ddeph == rhs.ddeph &&
    lhs.dclk == rhs.dclk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90ff7dc20ab8b7d1ed3917babacbe669";
  }

  static const char* value(const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90ff7dc20ab8b7d1ULL;
  static const uint64_t static_value2 = 0xed3917babacbe669ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssSsrEphemeris";
  }

  static const char* value(const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string prn        # Satellite PRN number\n"
"uint16 week       # GPS week, SSR message\n"
"float64 tow       # GPS time of week, SSR message\n"
"uint32 iod        # Issue of data, SSR message\n"
"float64 udi       # SSR update interval\n"
"uint8 iode        # Issue of data, ephemeris\n"
"uint32 iodcrc     # Issue of data crc for BDS\n"
"uint8 refd        # Sat ref datum (0:ITRF,1:regional)\n"
"float64[] deph    # Delta orbit {radial,along,cross}\n"
"float64[] ddeph   # Dot delta orbit {radial,along,cross}\n"
"float64[] dclk    # Delta clock {c0,c1,c2}\n"
;
  }

  static const char* value(const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.week);
      stream.next(m.tow);
      stream.next(m.iod);
      stream.next(m.udi);
      stream.next(m.iode);
      stream.next(m.iodcrc);
      stream.next(m.refd);
      stream.next(m.deph);
      stream.next(m.ddeph);
      stream.next(m.dclk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssSsrEphemeris_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssSsrEphemeris_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.prn);
    s << indent << "week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.week);
    s << indent << "tow: ";
    Printer<double>::stream(s, indent + "  ", v.tow);
    s << indent << "iod: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iod);
    s << indent << "udi: ";
    Printer<double>::stream(s, indent + "  ", v.udi);
    s << indent << "iode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iode);
    s << indent << "iodcrc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iodcrc);
    s << indent << "refd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.refd);
    s << indent << "deph[]" << std::endl;
    for (size_t i = 0; i < v.deph.size(); ++i)
    {
      s << indent << "  deph[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.deph[i]);
    }
    s << indent << "ddeph[]" << std::endl;
    for (size_t i = 0; i < v.ddeph.size(); ++i)
    {
      s << indent << "  ddeph[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ddeph[i]);
    }
    s << indent << "dclk[]" << std::endl;
    for (size_t i = 0; i < v.dclk.size(); ++i)
    {
      s << indent << "  dclk[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dclk[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSSSREPHEMERIS_H

// Generated by gencpp from file gnss_comm/GnssSsrCodeBias.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSSSRCODEBIAS_H
#define GNSS_COMM_MESSAGE_GNSSSSRCODEBIAS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssSsrCodeBias_
{
  typedef GnssSsrCodeBias_<ContainerAllocator> Type;

  GnssSsrCodeBias_()
    : prn()
    , week(0)
    , tow(0.0)
    , iod(0)
    , udi(0.0)
    , isdcb(0)
    , code()
    , bias()  {
    }
  GnssSsrCodeBias_(const ContainerAllocator& _alloc)
    : prn(_alloc)
    , week(0)
    , tow(0.0)
    , iod(0)
    , udi(0.0)
    , isdcb(0)
    , code(_alloc)
    , bias(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _prn_type;
  _prn_type prn;

   typedef uint16_t _week_type;
  _week_type week;

   typedef double _tow_type;
  _tow_type tow;

   typedef uint32_t _iod_type;
  _iod_type iod;

   typedef double _udi_type;
  _udi_type udi;

   typedef uint8_t _isdcb_type;
  _isdcb_type isdcb;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _code_type;
  _code_type code;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _bias_type;
  _bias_type bias;





  typedef boost::shared_ptr< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> const> ConstPtr;

}; // struct GnssSsrCodeBias_

typedef ::gnss_comm::GnssSsrCodeBias_<std::allocator<void> > GnssSsrCodeBias;

typedef boost::shared_ptr< ::gnss_comm::GnssSsrCodeBias > GnssSsrCodeBiasPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssSsrCodeBias const> GnssSsrCodeBiasConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator2> & rhs)
{
  return lhs.prn == rhs.prn &&
    lhs.week == rhs.week &&
    lhs.tow == rhs.tow &&
    lhs.iod == rhs.iod &&
    lhs.udi == rhs.udi &&
    lhs.isdcb == rhs.isdcb &&
    lhs.code == rhs.code &&
    lhs.bias == rhs.bias;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce4d49239692f6cf4c5f50ef544acb9f";
  }

  static const char* value(const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce4d49239692f6cfULL;
  static const uint64_t static_value2 = 0x4c5f50ef544acb9fULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssSsrCodeBias";
  }

  static const char* value(const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string prn        # Satellite PRN number\n"
"uint16 week       # GPS week, SSR message\n"
"float64 tow       # GPS time of week, SSR message\n"
"uint32 iod        # Issue of data, SSR message\n"
"float64 udi       # SSR update interval\n"
"uint8 isdcb       # If differenced\n"
"string[] code     # Code indicators\n"
"float64[] bias    # Code biases\n"
;
  }

  static const char* value(const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prn);
      stream.next(m.week);
      stream.next(m.tow);
      stream.next(m.iod);
      stream.next(m.udi);
      stream.next(m.isdcb);
      stream.next(m.code);
      stream.next(m.bias);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssSsrCodeBias_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssSsrCodeBias_<ContainerAllocator>& v)
  {
    s << indent << "prn: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.prn);
    s << indent << "week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.week);
    s << indent << "tow: ";
    Printer<double>::stream(s, indent + "  ", v.tow);
    s << indent << "iod: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iod);
    s << indent << "udi: ";
    Printer<double>::stream(s, indent + "  ", v.udi);
    s << indent << "isdcb: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isdcb);
    s << indent << "code[]" << std::endl;
    for (size_t i = 0; i < v.code.size(); ++i)
    {
      s << indent << "  code[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.code[i]);
    }
    s << indent << "bias[]" << std::endl;
    for (size_t i = 0; i < v.bias.size(); ++i)
    {
      s << indent << "  bias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bias[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSSSRCODEBIAS_H

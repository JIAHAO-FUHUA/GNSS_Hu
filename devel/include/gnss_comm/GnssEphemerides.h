// Generated by gencpp from file gnss_comm/GnssEphemerides.msg
// DO NOT EDIT!


#ifndef GNSS_COMM_MESSAGE_GNSSEPHEMERIDES_H
#define GNSS_COMM_MESSAGE_GNSSEPHEMERIDES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <gnss_comm/GnssEphemeris.h>
#include <gnss_comm/GlonassEphemeris.h>

namespace gnss_comm
{
template <class ContainerAllocator>
struct GnssEphemerides_
{
  typedef GnssEphemerides_<ContainerAllocator> Type;

  GnssEphemerides_()
    : header()
    , ephemerides()
    , glonass_ephemerides()  {
    }
  GnssEphemerides_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ephemerides(_alloc)
    , glonass_ephemerides(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::gnss_comm::GnssEphemeris_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::gnss_comm::GnssEphemeris_<ContainerAllocator> >> _ephemerides_type;
  _ephemerides_type ephemerides;

   typedef std::vector< ::gnss_comm::GlonassEphemeris_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::gnss_comm::GlonassEphemeris_<ContainerAllocator> >> _glonass_ephemerides_type;
  _glonass_ephemerides_type glonass_ephemerides;





  typedef boost::shared_ptr< ::gnss_comm::GnssEphemerides_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_comm::GnssEphemerides_<ContainerAllocator> const> ConstPtr;

}; // struct GnssEphemerides_

typedef ::gnss_comm::GnssEphemerides_<std::allocator<void> > GnssEphemerides;

typedef boost::shared_ptr< ::gnss_comm::GnssEphemerides > GnssEphemeridesPtr;
typedef boost::shared_ptr< ::gnss_comm::GnssEphemerides const> GnssEphemeridesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_comm::GnssEphemerides_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_comm::GnssEphemerides_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssEphemerides_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ephemerides == rhs.ephemerides &&
    lhs.glonass_ephemerides == rhs.glonass_ephemerides;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_comm::GnssEphemerides_<ContainerAllocator1> & lhs, const ::gnss_comm::GnssEphemerides_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_comm::GnssEphemerides_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_comm::GnssEphemerides_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_comm::GnssEphemerides_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
{
  static const char* value()
  {
    return "431654d65783239591dcbb9ac2bccfdd";
  }

  static const char* value(const ::gnss_comm::GnssEphemerides_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x431654d657832395ULL;
  static const uint64_t static_value2 = 0x91dcbb9ac2bccfddULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_comm/GnssEphemerides";
  }

  static const char* value(const ::gnss_comm::GnssEphemerides_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header \n"
"GnssEphemeris[] ephemerides             # GPS, BDS, Galileo ephemeris of each satellites\n"
"GlonassEphemeris[] glonass_ephemerides  # Glonass ephemeris of each satellites\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: gnss_comm/GnssEphemeris\n"
"string prn        # Satellite PRN number\n"
"uint16 week       # GPS week\n"
"uint8 sva         # SV accuracy (URA index)\n"
"uint16 code       # GPS: code on L2, GAL/BDS: data source\n"
"uint8 iode        # Issue of data, ephemeris\n"
"uint16 iodc       # Issue of data, clock\n"
"uint8 svh         # SV health\n"
"float64 toc       # Time of clock\n"
"float64 idot      # SV orbit parameter\n"
"float64 crs       # SV orbit parameter\n"
"float64 deln      # SV orbit parameter\n"
"float64 M0        # SV orbit parameter\n"
"float64 cuc       # SV orbit parameter\n"
"float64 e         # SV orbit parameter\n"
"float64 cus       # SV orbit parameter\n"
"float64 A         # SV orbit parameter\n"
"float64 toes      # SV orbit parameter\n"
"float64 cic       # SV orbit parameter\n"
"float64 OMG0      # SV orbit parameter\n"
"float64 cis       # SV orbit parameter\n"
"float64 i0        # SV orbit parameter\n"
"float64 crc       # SV orbit parameter\n"
"float64 omg       # SV orbit parameter\n"
"float64 OMGd      # SV orbit parameter\n"
"float64[] tgd     # Group delay parameters\n"
"float64 f2        # SV clock parameter\n"
"float64 f1        # SV clock parameter\n"
"float64 f0        # SV clock parameter\n"
"================================================================================\n"
"MSG: gnss_comm/GlonassEphemeris\n"
"string prn        # Satellite PRN number\n"
"uint16 week       # GPS week\n"
"int8 frq          # Satellite frequency number\n"
"uint8 iode        # Issue of data, ephemeris\n"
"uint8 svh         # SV health\n"
"uint8 age         # Age of operation\n"
"float64 toe       # Epoch of epherides\n"
"float64 tof       # Message frame time\n"
"float64[] pos     # Satellite position\n"
"float64[] vel     # Satellite velocity\n"
"float64[] acc     # Satellite acceleration\n"
"float64 taun      # SV clock bias\n"
"float64 gamn      # SV relative freq bias\n"
"float64 dtaun     # Delay between L1 and L2\n"
;
  }

  static const char* value(const ::gnss_comm::GnssEphemerides_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ephemerides);
      stream.next(m.glonass_ephemerides);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssEphemerides_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_comm::GnssEphemerides_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_comm::GnssEphemerides_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ephemerides[]" << std::endl;
    for (size_t i = 0; i < v.ephemerides.size(); ++i)
    {
      s << indent << "  ephemerides[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gnss_comm::GnssEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.ephemerides[i]);
    }
    s << indent << "glonass_ephemerides[]" << std::endl;
    for (size_t i = 0; i < v.glonass_ephemerides.size(); ++i)
    {
      s << indent << "  glonass_ephemerides[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gnss_comm::GlonassEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.glonass_ephemerides[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_COMM_MESSAGE_GNSSEPHEMERIDES_H

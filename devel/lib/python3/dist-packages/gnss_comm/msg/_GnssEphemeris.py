# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_comm/GnssEphemeris.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GnssEphemeris(genpy.Message):
  _md5sum = "f182a49b5f433f32cb565ad1e7c4c34a"
  _type = "gnss_comm/GnssEphemeris"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string prn        # Satellite PRN number
uint16 week       # GPS week
uint8 sva         # SV accuracy (URA index)
uint16 code       # GPS: code on L2, GAL/BDS: data source
uint8 iode        # Issue of data, ephemeris
uint16 iodc       # Issue of data, clock
uint8 svh         # SV health
float64 toc       # Time of clock
float64 idot      # SV orbit parameter
float64 crs       # SV orbit parameter
float64 deln      # SV orbit parameter
float64 M0        # SV orbit parameter
float64 cuc       # SV orbit parameter
float64 e         # SV orbit parameter
float64 cus       # SV orbit parameter
float64 A         # SV orbit parameter
float64 toes      # SV orbit parameter
float64 cic       # SV orbit parameter
float64 OMG0      # SV orbit parameter
float64 cis       # SV orbit parameter
float64 i0        # SV orbit parameter
float64 crc       # SV orbit parameter
float64 omg       # SV orbit parameter
float64 OMGd      # SV orbit parameter
float64[] tgd     # Group delay parameters
float64 f2        # SV clock parameter
float64 f1        # SV clock parameter
float64 f0        # SV clock parameter"""
  __slots__ = ['prn','week','sva','code','iode','iodc','svh','toc','idot','crs','deln','M0','cuc','e','cus','A','toes','cic','OMG0','cis','i0','crc','omg','OMGd','tgd','f2','f1','f0']
  _slot_types = ['string','uint16','uint8','uint16','uint8','uint16','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64[]','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,week,sva,code,iode,iodc,svh,toc,idot,crs,deln,M0,cuc,e,cus,A,toes,cic,OMG0,cis,i0,crc,omg,OMGd,tgd,f2,f1,f0

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssEphemeris, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = ''
      if self.week is None:
        self.week = 0
      if self.sva is None:
        self.sva = 0
      if self.code is None:
        self.code = 0
      if self.iode is None:
        self.iode = 0
      if self.iodc is None:
        self.iodc = 0
      if self.svh is None:
        self.svh = 0
      if self.toc is None:
        self.toc = 0.
      if self.idot is None:
        self.idot = 0.
      if self.crs is None:
        self.crs = 0.
      if self.deln is None:
        self.deln = 0.
      if self.M0 is None:
        self.M0 = 0.
      if self.cuc is None:
        self.cuc = 0.
      if self.e is None:
        self.e = 0.
      if self.cus is None:
        self.cus = 0.
      if self.A is None:
        self.A = 0.
      if self.toes is None:
        self.toes = 0.
      if self.cic is None:
        self.cic = 0.
      if self.OMG0 is None:
        self.OMG0 = 0.
      if self.cis is None:
        self.cis = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.crc is None:
        self.crc = 0.
      if self.omg is None:
        self.omg = 0.
      if self.OMGd is None:
        self.OMGd = 0.
      if self.tgd is None:
        self.tgd = []
      if self.f2 is None:
        self.f2 = 0.
      if self.f1 is None:
        self.f1 = 0.
      if self.f0 is None:
        self.f0 = 0.
    else:
      self.prn = ''
      self.week = 0
      self.sva = 0
      self.code = 0
      self.iode = 0
      self.iodc = 0
      self.svh = 0
      self.toc = 0.
      self.idot = 0.
      self.crs = 0.
      self.deln = 0.
      self.M0 = 0.
      self.cuc = 0.
      self.e = 0.
      self.cus = 0.
      self.A = 0.
      self.toes = 0.
      self.cic = 0.
      self.OMG0 = 0.
      self.cis = 0.
      self.i0 = 0.
      self.crc = 0.
      self.omg = 0.
      self.OMGd = 0.
      self.tgd = []
      self.f2 = 0.
      self.f1 = 0.
      self.f0 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.prn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBHBHB17d().pack(_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd))
      length = len(self.tgd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tgd))
      _x = self
      buff.write(_get_struct_3d().pack(_x.f2, _x.f1, _x.f0))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prn = str[start:end]
      _x = self
      start = end
      end += 145
      (_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd,) = _get_struct_HBHBHB17d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tgd = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.f2, _x.f1, _x.f0,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.prn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBHBHB17d().pack(_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd))
      length = len(self.tgd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tgd.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.f2, _x.f1, _x.f0))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prn = str[start:end]
      _x = self
      start = end
      end += 145
      (_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd,) = _get_struct_HBHBHB17d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tgd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.f2, _x.f1, _x.f0,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_HBHBHB17d = None
def _get_struct_HBHBHB17d():
    global _struct_HBHBHB17d
    if _struct_HBHBHB17d is None:
        _struct_HBHBHB17d = struct.Struct("<HBHBHB17d")
    return _struct_HBHBHB17d

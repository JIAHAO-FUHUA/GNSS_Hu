# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_comm/GnssEphemMsgarray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gnss_comm.msg
import std_msgs.msg

class GnssEphemMsgarray(genpy.Message):
  _md5sum = "31054b3280a005cf30c1076c7645b85e"
  _type = "gnss_comm/GnssEphemMsgarray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header 
GnssEphemMsg[] ephem             # GPS, BDS, Galileo ephemeris of each satellites
GnssGloEphemMsg[] gloephem 
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: gnss_comm/GnssEphemMsg
# This message contains GPS, Galileo and BeiDou ephemeris data

uint32 sat
GnssTimeMsg ttr
GnssTimeMsg toe
GnssTimeMsg toc
float64 toe_tow
uint32 week
uint32 iode
uint32 iodc
uint32 health
uint32 code
float64 ura
float64 A
float64 e
float64 i0
float64 omg
float64 OMG0
float64 M0
float64 delta_n
float64 OMG_dot
float64 i_dot
float64 cuc
float64 cus
float64 crc
float64 crs
float64 cic
float64 cis
float64 af0
float64 af1
float64 af2
float64 tgd0
float64 tgd1
float64 A_dot
float64 n_dot
================================================================================
MSG: gnss_comm/GnssTimeMsg
# This message contains GNSS time expressed in the form of 
# GNSS week number and time of week(in seconds)

uint32 week
float64 tow
================================================================================
MSG: gnss_comm/GnssGloEphemMsg
# This message contains GLONASS ephemeris data

uint32 sat
GnssTimeMsg ttr
GnssTimeMsg toe
int32  freqo
uint32 iode
uint32 health
uint32 age
float64 ura
float64 pos_x
float64 pos_y
float64 pos_z
float64 vel_x
float64 vel_y
float64 vel_z
float64 acc_x
float64 acc_y
float64 acc_z
float64 tau_n
float64 gamma
float64 delta_tau_n"""
  __slots__ = ['header','ephem','gloephem']
  _slot_types = ['std_msgs/Header','gnss_comm/GnssEphemMsg[]','gnss_comm/GnssGloEphemMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ephem,gloephem

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssEphemMsgarray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ephem is None:
        self.ephem = []
      if self.gloephem is None:
        self.gloephem = []
    else:
      self.header = std_msgs.msg.Header()
      self.ephem = []
      self.gloephem = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ephem)
      buff.write(_struct_I.pack(length))
      for val1 in self.ephem:
        _x = val1.sat
        buff.write(_get_struct_I().pack(_x))
        _v1 = val1.ttr
        _x = _v1
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _v2 = val1.toe
        _x = _v2
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _v3 = val1.toc
        _x = _v3
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _x = val1
        buff.write(_get_struct_d5I23d().pack(_x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot))
      length = len(self.gloephem)
      buff.write(_struct_I.pack(length))
      for val1 in self.gloephem:
        _x = val1.sat
        buff.write(_get_struct_I().pack(_x))
        _v4 = val1.ttr
        _x = _v4
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _v5 = val1.toe
        _x = _v5
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _x = val1
        buff.write(_get_struct_i3I13d().pack(_x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ephem is None:
        self.ephem = None
      if self.gloephem is None:
        self.gloephem = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ephem = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GnssEphemMsg()
        start = end
        end += 4
        (val1.sat,) = _get_struct_I().unpack(str[start:end])
        _v6 = val1.ttr
        _x = _v6
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _v7 = val1.toe
        _x = _v7
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _v8 = val1.toc
        _x = _v8
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _x = val1
        start = end
        end += 212
        (_x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot,) = _get_struct_d5I23d().unpack(str[start:end])
        self.ephem.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gloephem = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GnssGloEphemMsg()
        start = end
        end += 4
        (val1.sat,) = _get_struct_I().unpack(str[start:end])
        _v9 = val1.ttr
        _x = _v9
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _v10 = val1.toe
        _x = _v10
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _x = val1
        start = end
        end += 120
        (_x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n,) = _get_struct_i3I13d().unpack(str[start:end])
        self.gloephem.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ephem)
      buff.write(_struct_I.pack(length))
      for val1 in self.ephem:
        _x = val1.sat
        buff.write(_get_struct_I().pack(_x))
        _v11 = val1.ttr
        _x = _v11
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _v12 = val1.toe
        _x = _v12
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _v13 = val1.toc
        _x = _v13
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _x = val1
        buff.write(_get_struct_d5I23d().pack(_x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot))
      length = len(self.gloephem)
      buff.write(_struct_I.pack(length))
      for val1 in self.gloephem:
        _x = val1.sat
        buff.write(_get_struct_I().pack(_x))
        _v14 = val1.ttr
        _x = _v14
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _v15 = val1.toe
        _x = _v15
        buff.write(_get_struct_Id().pack(_x.week, _x.tow))
        _x = val1
        buff.write(_get_struct_i3I13d().pack(_x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ephem is None:
        self.ephem = None
      if self.gloephem is None:
        self.gloephem = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ephem = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GnssEphemMsg()
        start = end
        end += 4
        (val1.sat,) = _get_struct_I().unpack(str[start:end])
        _v16 = val1.ttr
        _x = _v16
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _v17 = val1.toe
        _x = _v17
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _v18 = val1.toc
        _x = _v18
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _x = val1
        start = end
        end += 212
        (_x.toe_tow, _x.week, _x.iode, _x.iodc, _x.health, _x.code, _x.ura, _x.A, _x.e, _x.i0, _x.omg, _x.OMG0, _x.M0, _x.delta_n, _x.OMG_dot, _x.i_dot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.af0, _x.af1, _x.af2, _x.tgd0, _x.tgd1, _x.A_dot, _x.n_dot,) = _get_struct_d5I23d().unpack(str[start:end])
        self.ephem.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gloephem = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GnssGloEphemMsg()
        start = end
        end += 4
        (val1.sat,) = _get_struct_I().unpack(str[start:end])
        _v19 = val1.ttr
        _x = _v19
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _v20 = val1.toe
        _x = _v20
        start = end
        end += 12
        (_x.week, _x.tow,) = _get_struct_Id().unpack(str[start:end])
        _x = val1
        start = end
        end += 120
        (_x.freqo, _x.iode, _x.health, _x.age, _x.ura, _x.pos_x, _x.pos_y, _x.pos_z, _x.vel_x, _x.vel_y, _x.vel_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.tau_n, _x.gamma, _x.delta_tau_n,) = _get_struct_i3I13d().unpack(str[start:end])
        self.gloephem.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_d5I23d = None
def _get_struct_d5I23d():
    global _struct_d5I23d
    if _struct_d5I23d is None:
        _struct_d5I23d = struct.Struct("<d5I23d")
    return _struct_d5I23d
_struct_i3I13d = None
def _get_struct_i3I13d():
    global _struct_i3I13d
    if _struct_i3I13d is None:
        _struct_i3I13d = struct.Struct("<i3I13d")
    return _struct_i3I13d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_comm/GnssEphemerides.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gnss_comm.msg
import std_msgs.msg

class GnssEphemerides(genpy.Message):
  _md5sum = "431654d65783239591dcbb9ac2bccfdd"
  _type = "gnss_comm/GnssEphemerides"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header 
GnssEphemeris[] ephemerides             # GPS, BDS, Galileo ephemeris of each satellites
GlonassEphemeris[] glonass_ephemerides  # Glonass ephemeris of each satellites
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: gnss_comm/GnssEphemeris
string prn        # Satellite PRN number
uint16 week       # GPS week
uint8 sva         # SV accuracy (URA index)
uint16 code       # GPS: code on L2, GAL/BDS: data source
uint8 iode        # Issue of data, ephemeris
uint16 iodc       # Issue of data, clock
uint8 svh         # SV health
float64 toc       # Time of clock
float64 idot      # SV orbit parameter
float64 crs       # SV orbit parameter
float64 deln      # SV orbit parameter
float64 M0        # SV orbit parameter
float64 cuc       # SV orbit parameter
float64 e         # SV orbit parameter
float64 cus       # SV orbit parameter
float64 A         # SV orbit parameter
float64 toes      # SV orbit parameter
float64 cic       # SV orbit parameter
float64 OMG0      # SV orbit parameter
float64 cis       # SV orbit parameter
float64 i0        # SV orbit parameter
float64 crc       # SV orbit parameter
float64 omg       # SV orbit parameter
float64 OMGd      # SV orbit parameter
float64[] tgd     # Group delay parameters
float64 f2        # SV clock parameter
float64 f1        # SV clock parameter
float64 f0        # SV clock parameter
================================================================================
MSG: gnss_comm/GlonassEphemeris
string prn        # Satellite PRN number
uint16 week       # GPS week
int8 frq          # Satellite frequency number
uint8 iode        # Issue of data, ephemeris
uint8 svh         # SV health
uint8 age         # Age of operation
float64 toe       # Epoch of epherides
float64 tof       # Message frame time
float64[] pos     # Satellite position
float64[] vel     # Satellite velocity
float64[] acc     # Satellite acceleration
float64 taun      # SV clock bias
float64 gamn      # SV relative freq bias
float64 dtaun     # Delay between L1 and L2"""
  __slots__ = ['header','ephemerides','glonass_ephemerides']
  _slot_types = ['std_msgs/Header','gnss_comm/GnssEphemeris[]','gnss_comm/GlonassEphemeris[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ephemerides,glonass_ephemerides

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssEphemerides, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ephemerides is None:
        self.ephemerides = []
      if self.glonass_ephemerides is None:
        self.glonass_ephemerides = []
    else:
      self.header = std_msgs.msg.Header()
      self.ephemerides = []
      self.glonass_ephemerides = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ephemerides)
      buff.write(_struct_I.pack(length))
      for val1 in self.ephemerides:
        _x = val1.prn
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_HBHBHB17d().pack(_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd))
        length = len(val1.tgd)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.tgd))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.f2, _x.f1, _x.f0))
      length = len(self.glonass_ephemerides)
      buff.write(_struct_I.pack(length))
      for val1 in self.glonass_ephemerides:
        _x = val1.prn
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Hb3B2d().pack(_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof))
        length = len(val1.pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.pos))
        length = len(val1.vel)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.vel))
        length = len(val1.acc)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.acc))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.taun, _x.gamn, _x.dtaun))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ephemerides is None:
        self.ephemerides = None
      if self.glonass_ephemerides is None:
        self.glonass_ephemerides = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ephemerides = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GnssEphemeris()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.prn = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.prn = str[start:end]
        _x = val1
        start = end
        end += 145
        (_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd,) = _get_struct_HBHBHB17d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tgd = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.f2, _x.f1, _x.f0,) = _get_struct_3d().unpack(str[start:end])
        self.ephemerides.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.glonass_ephemerides = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GlonassEphemeris()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.prn = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.prn = str[start:end]
        _x = val1
        start = end
        end += 22
        (_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof,) = _get_struct_Hb3B2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.pos = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.vel = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.acc = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.taun, _x.gamn, _x.dtaun,) = _get_struct_3d().unpack(str[start:end])
        self.glonass_ephemerides.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ephemerides)
      buff.write(_struct_I.pack(length))
      for val1 in self.ephemerides:
        _x = val1.prn
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_HBHBHB17d().pack(_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd))
        length = len(val1.tgd)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.tgd.tostring())
        _x = val1
        buff.write(_get_struct_3d().pack(_x.f2, _x.f1, _x.f0))
      length = len(self.glonass_ephemerides)
      buff.write(_struct_I.pack(length))
      for val1 in self.glonass_ephemerides:
        _x = val1.prn
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Hb3B2d().pack(_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof))
        length = len(val1.pos)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.pos.tostring())
        length = len(val1.vel)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.vel.tostring())
        length = len(val1.acc)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.acc.tostring())
        _x = val1
        buff.write(_get_struct_3d().pack(_x.taun, _x.gamn, _x.dtaun))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ephemerides is None:
        self.ephemerides = None
      if self.glonass_ephemerides is None:
        self.glonass_ephemerides = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ephemerides = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GnssEphemeris()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.prn = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.prn = str[start:end]
        _x = val1
        start = end
        end += 145
        (_x.week, _x.sva, _x.code, _x.iode, _x.iodc, _x.svh, _x.toc, _x.idot, _x.crs, _x.deln, _x.M0, _x.cuc, _x.e, _x.cus, _x.A, _x.toes, _x.cic, _x.OMG0, _x.cis, _x.i0, _x.crc, _x.omg, _x.OMGd,) = _get_struct_HBHBHB17d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tgd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 24
        (_x.f2, _x.f1, _x.f0,) = _get_struct_3d().unpack(str[start:end])
        self.ephemerides.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.glonass_ephemerides = []
      for i in range(0, length):
        val1 = gnss_comm.msg.GlonassEphemeris()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.prn = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.prn = str[start:end]
        _x = val1
        start = end
        end += 22
        (_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof,) = _get_struct_Hb3B2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 24
        (_x.taun, _x.gamn, _x.dtaun,) = _get_struct_3d().unpack(str[start:end])
        self.glonass_ephemerides.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_HBHBHB17d = None
def _get_struct_HBHBHB17d():
    global _struct_HBHBHB17d
    if _struct_HBHBHB17d is None:
        _struct_HBHBHB17d = struct.Struct("<HBHBHB17d")
    return _struct_HBHBHB17d
_struct_Hb3B2d = None
def _get_struct_Hb3B2d():
    global _struct_Hb3B2d
    if _struct_Hb3B2d is None:
        _struct_Hb3B2d = struct.Struct("<Hb3B2d")
    return _struct_Hb3B2d

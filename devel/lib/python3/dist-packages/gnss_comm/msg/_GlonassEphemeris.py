# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_comm/GlonassEphemeris.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GlonassEphemeris(genpy.Message):
  _md5sum = "f9f92a33d8424e6a6e4db533429ffaef"
  _type = "gnss_comm/GlonassEphemeris"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string prn        # Satellite PRN number
uint16 week       # GPS week
int8 frq          # Satellite frequency number
uint8 iode        # Issue of data, ephemeris
uint8 svh         # SV health
uint8 age         # Age of operation
float64 toe       # Epoch of epherides
float64 tof       # Message frame time
float64[] pos     # Satellite position
float64[] vel     # Satellite velocity
float64[] acc     # Satellite acceleration
float64 taun      # SV clock bias
float64 gamn      # SV relative freq bias
float64 dtaun     # Delay between L1 and L2"""
  __slots__ = ['prn','week','frq','iode','svh','age','toe','tof','pos','vel','acc','taun','gamn','dtaun']
  _slot_types = ['string','uint16','int8','uint8','uint8','uint8','float64','float64','float64[]','float64[]','float64[]','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,week,frq,iode,svh,age,toe,tof,pos,vel,acc,taun,gamn,dtaun

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlonassEphemeris, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = ''
      if self.week is None:
        self.week = 0
      if self.frq is None:
        self.frq = 0
      if self.iode is None:
        self.iode = 0
      if self.svh is None:
        self.svh = 0
      if self.age is None:
        self.age = 0
      if self.toe is None:
        self.toe = 0.
      if self.tof is None:
        self.tof = 0.
      if self.pos is None:
        self.pos = []
      if self.vel is None:
        self.vel = []
      if self.acc is None:
        self.acc = []
      if self.taun is None:
        self.taun = 0.
      if self.gamn is None:
        self.gamn = 0.
      if self.dtaun is None:
        self.dtaun = 0.
    else:
      self.prn = ''
      self.week = 0
      self.frq = 0
      self.iode = 0
      self.svh = 0
      self.age = 0
      self.toe = 0.
      self.tof = 0.
      self.pos = []
      self.vel = []
      self.acc = []
      self.taun = 0.
      self.gamn = 0.
      self.dtaun = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.prn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hb3B2d().pack(_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pos))
      length = len(self.vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.vel))
      length = len(self.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.acc))
      _x = self
      buff.write(_get_struct_3d().pack(_x.taun, _x.gamn, _x.dtaun))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prn = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof,) = _get_struct_Hb3B2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vel = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.taun, _x.gamn, _x.dtaun,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.prn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hb3B2d().pack(_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof))
      length = len(self.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pos.tostring())
      length = len(self.vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.vel.tostring())
      length = len(self.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.acc.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.taun, _x.gamn, _x.dtaun))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prn = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.week, _x.frq, _x.iode, _x.svh, _x.age, _x.toe, _x.tof,) = _get_struct_Hb3B2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.taun, _x.gamn, _x.dtaun,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_Hb3B2d = None
def _get_struct_Hb3B2d():
    global _struct_Hb3B2d
    if _struct_Hb3B2d is None:
        _struct_Hb3B2d = struct.Struct("<Hb3B2d")
    return _struct_Hb3B2d
